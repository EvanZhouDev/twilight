import ./test/functions.twi

# Twilight supports functions of any complexity through De Brujin Indexing: Even this pair-based predecessor function implementation!

Φ = λp z.z (S (p T)) (p T) # more cool symbols!

P = λn.n Φ (λz.z 0 0) F

# Now, let's define a conditional...
Z = λn.n F ¬ F

# So we can write recursion
Y = (λy.(λx.y (x x)) (λx.y (x x)))

# Twilight employs Normal-Order evaluation, meaning that your recursive functions safely evaluate and exit!
R = λr n.Z n 1 (Z (P n) 1 ((r (P n)) S (r (P (P n)))))

# here's the fibonnaci!
fib = λn.Y R n

# and call...
fib 3